#include "imports/stdlib.fc";
#include "./op-codes.fc";
#include "./messages.fc";
#include "./swap_utils.fc";
;;
;; Common
;;

const int msg_flag::bounceable = 0x18;

builder store_zeros(builder b, int n) asm "STZEROES";

slice addr_none() asm "b{00} PUSHSLICE";

;;
;; DEX
;;

const int ton_vault::swap = 0xea06185d;
const int min_tons_for_storage = 10000000; ;; 0.01 ton
const int gas_consumption = 15000000;

(slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    slice owner_address = ds~load_msg_addr();
    slice root_addr = ds~load_msg_addr();
    cell swap_wallet_code = ds~load_ref();

    return (
        owner_address,
        root_addr,
        swap_wallet_code
    );
}


() save_data(
    slice owner_address,
    slice root_addr, 
    cell swap_wallet_code
) impure inline {
    pack_swap_wallet_data(owner_address,root_addr,swap_wallet_code);
}



(int, int) calc_fees(int fixed_fee, int trade_value, int percentage, int swapOp) inline_ref {
    if(swapOp == 1){
        int trade_fee = trade_value * percentage / 1000;
        return (trade_fee, trade_value);
    }
    int fee = trade_value * percentage / 1000;
    int trade_fee = fee > fixed_fee ? fee : fixed_fee;

    return (trade_fee, trade_value);
}

() ton_to_jetton(int my_balance, slice in_msg_body, int msg_value) impure {
    var (
        slice owner_address,
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();

    
    int fixed_fee = in_msg_body~load_coins();
    int GAS_FEE = in_msg_body~load_coins();
    int FWD_AMOUNT = in_msg_body~load_coins();
    int MIN_VALUE = in_msg_body~load_coins();
    int percentage = in_msg_body~load_uint(32);
    slice fee_wallet = in_msg_body~load_msg_addr();
    slice swap_data = in_msg_body~load_ref().begin_parse();
    int amount = swap_data~load_coins();
    slice receipient_addr = swap_data~load_msg_addr();
    slice pool_addr = swap_data~load_msg_addr();
    slice ton_vault_addr = swap_data~load_msg_addr();
    int limit = swap_data~load_coins();
    int deadline = swap_data~load_uint(32);

    var (int trade_fee, int trade_value) = calc_fees(fixed_fee, amount, percentage, 1);

    if(msg_value < amount + GAS_FEE + gas_consumption) {
        send_empty_message(0,owner_address,CARRY_REMAINING_GAS);
        return();
    }

    cell msg_body = begin_cell()
        .store_uint(ton_vault::swap, 32)
        .store_uint(0, 64) ;; query_id:int64
        .store_coins(amount - trade_fee) ;; amount:Coins # subtract gas
        ;; _:SwapStep
        .store_slice(pool_addr) ;; pool_addr:MsgAddressInt
        .store_uint(0, 1) ;; kind:SwapKind
        .store_coins(limit) ;; limit:Coins
        .store_maybe_ref(null()) ;; next:(Maybe ^SwapStep)
        ;; swap_params:^SwapParams
        .store_ref(
            begin_cell()
                .store_uint(now() + 60 * deadline, 32) ;; deadline:Timestamp # 5 min
                .store_slice(receipient_addr) ;; recipient_addr:MsgAddressInt
                .store_slice(addr_none()) ;; referral_addr:MsgAddress
                .store_maybe_ref(null()) ;; fulfill_payload:(Maybe ^Cell)
                .store_maybe_ref(null()) ;; reject_payload:(Maybe ^Cell)
                .end_cell()
        )
        .end_cell();

    send_raw_message(
        begin_cell()
            .store_uint(msg_flag::bounceable, 6)
            .store_slice(ton_vault_addr)
            .store_coins(trade_value - trade_fee - gas_consumption)
            .store_zeros(1 + 4 + 4 + 64 + 32 + 1)
            .store_maybe_ref(msg_body)
            .end_cell(),
        0
    );
    send_empty_message(trade_fee,fee_wallet,PAID_EXTERNALLY);
}


() jetton_to_jetton(int my_balance, slice in_msg_body, slice msg_sender, int msg_value) impure {
    var (
        slice owner_address,
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();

    int fixed_fee = in_msg_body~load_coins();
    int GAS_FEE = in_msg_body~load_coins();
    int FWD_AMOUNT = in_msg_body~load_coins();
    int MIN_VALUE = in_msg_body~load_coins();
    int percentage = in_msg_body~load_uint(32);
    slice fee_wallet = in_msg_body~load_msg_addr();
    slice swap_data = in_msg_body~load_ref().begin_parse();

    int query_id = swap_data~load_uint(64); ;; query_id
    int jetton_amount = swap_data~load_coins();
    slice from_address = swap_data~load_msg_addr();
    slice forward_payload = swap_data~load_ref().begin_parse();
    cell swap_payload = forward_payload~load_ref();
    int jettonToTon = forward_payload~load_coins();
    slice aggregator_jetton_addr = forward_payload~load_msg_addr();
    slice jetton_vault = forward_payload~load_msg_addr();
    var (int trade_fee, int trade_value) = calc_fees(fixed_fee, jettonToTon, percentage, 2);
    ;; throw_unless(200, msg_value >  MIN_VALUE + gas_consumption);
    var revert_msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(0, 64) ;; query_id
        .store_coins(jetton_amount)
        .store_slice(from_address) ;; destination
        .store_slice(from_address) ;; response address
        .store_maybe_ref(begin_cell().end_cell())
        .store_coins(0) 
        .store_maybe_ref(begin_cell().end_cell())
        .end_cell();

    if(msg_value < trade_fee + MIN_VALUE + 3 * gas_consumption) {
        send_simple_message(0,aggregator_jetton_addr,revert_msg_body,CARRY_REMAINING_GAS);
        return();
    }
    if(MIN_VALUE < FWD_AMOUNT){
        send_simple_message(0,aggregator_jetton_addr,revert_msg_body,CARRY_REMAINING_GAS);
        return();
    }
    ;; throw_unless(201, MIN_VALUE > FWD_AMOUNT);

    var msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(0, 64) ;; query_id
        .store_coins(jetton_amount)
        .store_slice(jetton_vault) ;; destination
        .store_slice(from_address) ;; response address
        .store_maybe_ref(begin_cell().end_cell())
        .store_coins(FWD_AMOUNT) 
        .store_maybe_ref(swap_payload)
    .end_cell();

    send_simple_message(MIN_VALUE,aggregator_jetton_addr,msg_body,PAID_EXTERNALLY); ;; perfrom swap
    send_empty_message(trade_fee,fee_wallet,PAID_EXTERNALLY); ;; pay trade fee
    int excess = msg_value - trade_fee - MIN_VALUE - 3 * gas_consumption;
    if(excess > 0){
        send_empty_message(excess,owner_address,PAID_EXTERNALLY); ;; send remaining gas back
    }
}


() withdraw_excess_tokens(int my_balance, slice in_msg_body, slice msg_sender) impure {
    var (
        slice owner_address,
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();



    ;; throw_unless(250, my_balance > 1000000000);
    int withdrawal_amount = in_msg_body~load_coins();

    throw_unless(505, equal_slices(msg_sender, owner_address));
    throw_unless(516, my_balance > withdrawal_amount);

    int allowed_amount = min(withdrawal_amount, my_balance - min_tons_for_storage);

    send_empty_message(allowed_amount, owner_address, PAID_EXTERNALLY);
}


() withdraw_jetton(slice in_msg_body, slice msg_sender) impure {
    var (
        slice owner_address,
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();


    throw_unless(506, equal_slices(msg_sender, owner_address));

    int jetton_amount = in_msg_body~load_coins();
    slice aggregator_jetton_addr = in_msg_body~load_msg_addr();

    var msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(0, 64) ;; query_id
        .store_coins(jetton_amount)
        .store_slice(owner_address) ;; destination
        .store_slice(owner_address) ;; response address
        .store_maybe_ref(begin_cell().end_cell())
        .store_coins(0)
        .store_maybe_ref(begin_cell().end_cell())
    .end_cell();

    send_simple_message(0,aggregator_jetton_addr,msg_body,CARRY_REMAINING_GAS);
}
 

() retrieve_fee(int my_balance, slice in_msg_body, slice msg_sender, int msg_value, int operation) impure {

    var (
        slice owner_address,
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();



    var msg_body = begin_cell().end_cell();

    if(operation == 1){
        int amount = in_msg_body~load_coins();
        slice receipient_addr = in_msg_body~load_msg_addr();
        slice pool_addr = in_msg_body~load_msg_addr();
        slice ton_vault_addr = in_msg_body~load_msg_addr();
        int limit = in_msg_body~load_coins();
        int deadline = in_msg_body~load_uint(32);
        throw_unless(507, equal_slices(owner_address, msg_sender));
        
        msg_body = begin_cell()
            .store_uint(op::retrieve_fee, 32)
            .store_slice(owner_address)
            .store_uint(operation, 32)
            .store_ref(
                begin_cell()
                    .store_coins(amount)
                    .store_slice(receipient_addr)
                    .store_slice(pool_addr)
                    .store_slice(ton_vault_addr)
                    .store_coins(limit)
                    .store_uint(deadline, 32)
                .end_cell()
            )
            .end_cell();
    } 


    if(operation == 2) {
        int query_id = in_msg_body~load_uint(64); ;; query_id
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        cell forward_payload = in_msg_body~load_ref();
        msg_body = begin_cell()
            .store_uint(op::retrieve_fee, 32)
            .store_slice(owner_address)
            .store_uint(operation, 32)
            .store_ref(
                begin_cell()
                    .store_uint(query_id, 64)
                    .store_coins(jetton_amount)
                    .store_slice(from_address)
                    .store_ref(forward_payload)
                .end_cell()
            )
        .end_cell();
    }
    

    send_simple_message(0,root_addr,msg_body,CARRY_REMAINING_GAS);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()){
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; NOTE: Ignore bounced messages.
        return ();
    }
    slice msg_sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    var (
        slice owner_address,
        slice root_addr, 
        cell swap_wallet_code
    ) = load_data();


    ;; if(op == op::swap_ton_to_jetton){
    ;;     ton_to_jetton(my_balance,in_msg_body,msg_value);
    ;; }

    ;; jettons to jetton 
    ;; jettons to ton
    if(op == op::transfer_notification) {
        int operation = 2;
        retrieve_fee(my_balance,in_msg_body,msg_sender, msg_value, operation);
        ;; jetton_to_jetton(my_balance,in_msg_body, msg_sender, msg_value);
    }

    if(op == op::make_swap_ton){
        int operation = 1;
        retrieve_fee(my_balance,in_msg_body, msg_sender, msg_value, operation); ;; get swap fee first
    }

    if(op == op::retrieved_fee) {
        throw_unless(105, equal_slices(msg_sender, root_addr));
        int operation = in_msg_body~load_uint(32);
        if(operation == 1){
            ton_to_jetton(my_balance,in_msg_body,msg_value);
        } 
        if(operation == 2){
            jetton_to_jetton(my_balance,in_msg_body, msg_sender, msg_value);
        }
       
    }
    if(op == op::withdraw_ton) {
        withdraw_excess_tokens(my_balance,in_msg_body,msg_sender);
    }

    if(op == op::withdraw_jetton){
        withdraw_jetton(in_msg_body,msg_sender);
    }

}


(slice, slice, cell) get_swap_wallet_data() method_id {
    return load_data();
}

int get_contract_balance() method_id {
    var [balance, _] =  get_balance();
    return balance;
}